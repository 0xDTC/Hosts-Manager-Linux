#!/bin/bash

# Color codes
GREEN="\033[0;32m"
BLUE="\033[0;34m"
RED="\033[0;31m"
YELLOW="\033[0;33m"
RED_BG="\033[41m"
RESET="\033[0m"

# Default entries to keep or restore if missing, with correct indentation
DEFAULT_ENTRIES=(
  "127.0.0.1       localhost"
  "127.0.1.1       kali"
  "::1             localhost ip6-localhost ip6-loopback"
  "ff02::1         ip6-allnodes"
  "ff02::2         ip6-allrouters"
)

# Ensure script is run as sudo
if (( EUID != 0 )); then
  echo -e "${RED}Please run this script as sudo for full functionality.${RESET}"
  exit 1
fi

# Function to check and restore default entries if missing
check_and_restore_defaults() {
  for entry in "${DEFAULT_ENTRIES[@]}"; do
    # Extract the IP portion to match more accurately
    ip_part=$(echo "$entry" | awk '{print $1}')
    if ! grep -q "^$ip_part" /etc/hosts; then
      echo "$entry" | sudo tee -a /etc/hosts > /dev/null
      echo -e "${YELLOW}Restored missing default entry:${RESET} $entry"
    fi
  done
}

# Function to display the usage menu
usage() {
  echo -e "${GREEN}1. Add new host${RESET}"
  echo -e "${BLUE}2. Update existing host IP${RESET}"
  echo -e "${YELLOW}3. Append sub-hostname to an existing entry${RESET}"
  echo -e "${RED}4. Remove an existing entry${RESET}"
  echo -e "${RED_BG}5. Wipe all non-localhost entries in /etc/hosts (Confirmation required)${RESET}"
}

# Function to wipe non-default entries in /etc/hosts
wipe_hosts() {
  read -p "Are you sure you want to wipe all non-localhost entries? (y/n): " confirm
  if [[ "$confirm" == "y" ]]; then
    # Preserve only the default entries in /etc/hosts
    sudo cp /etc/hosts /tmp/hosts_backup  # Backup existing hosts file
    grep -E "127\.0\.0\.1\s+localhost|127\.0\.1\.1\s+kali|::1\s+localhost\s+ip6-localhost\s+ip6-loopback|ff02::1\s+ip6-allnodes|ff02::2\s+ip6-allrouters" /tmp/hosts_backup | sudo tee /etc/hosts > /dev/null
    echo -e "${RED}Non-localhost entries wiped.${RESET}"
  else
    echo "Operation canceled."
  fi
}

# Function to update host IP with input validation
update_host_ip() {
  echo -e "\nUser-added entries:\n"
  awk "/127\.0\.0\.1\s+localhost|127\.0\.1\.1\s+kali|::1\s+localhost\s+ip6-localhost\s+ip6-loopback|ff02::1\s+ip6-allnodes|ff02::2\s+ip6-allrouters/ {next} {count++; print count, \$0}" /etc/hosts
  read -p "Choose an entry by number to update its IP: " number

  # Check if the selection is a valid number
  if ! [[ "$number" =~ ^[0-9]+$ ]]; then
    echo "Invalid selection. Please enter a valid number."
    return
  fi

  entry=$(awk "/127\.0\.0\.1\s+localhost|127\.0\.1\.1\s+kali|::1\s+localhost\s+ip6-localhost\s+ip6-loopback|ff02::1\s+ip6-allnodes|ff02::2\s+ip6-allrouters/ {next} {count++} count==$number" /etc/hosts)
  if [ -z "$entry" ]; then
    echo "Invalid selection. No such entry."
    return
  fi

  echo "Current entry: $entry"
  read -p "Enter the new IP address: " new_ip

  # Validate IP format
  if ! [[ $new_ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    echo "Invalid IP address format."
    return
  fi

  # Get hostnames from the selected entry and update IP
  hostnames=$(echo "$entry" | awk '{$1=""; print $0}' | sed 's/^[ \t]*//')
  sed -i "s/^.*$entry\$/$new_ip $hostnames/" /etc/hosts
  echo "IP address updated for $hostnames."
}

# Check and restore default entries before executing options
check_and_restore_defaults

# Main menu
usage
read -p "Select an option (1-5): " option

case $option in
  1) # Add new host
    read -p "Provide IP: " ip
    read -p "Provide hostname: " hostname
    if [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]] && [[ $hostname =~ ^[a-zA-Z0-9.-]+$ ]]; then
      if grep -q "$ip" /etc/hosts; then
        echo "This IP already exists. Use option 3 to append a sub-hostname."
      else
        echo "$ip    $hostname" >> /etc/hosts
        echo "New host added."
      fi
    else
      echo "Invalid IP or hostname format."
    fi
    ;;
  2) # Update existing host IP
    update_host_ip
    ;;
  3) # Append sub-hostname
    echo -e "\nUser-added entries:\n"
    awk "/127\.0\.0\.1\s+localhost|127\.0\.1\.1\s+kali|::1\s+localhost\s+ip6-localhost\s+ip6-loopback|ff02::1\s+ip6-allnodes|ff02::2\s+ip6-allrouters/ {next} {count++; print count, \$0}" /etc/hosts
    read -p "Choose entry by number: " number
    entry=$(awk "/127\.0\.0\.1\s+localhost|127\.0\.1\.1\s+kali|::1\s+localhost\s+ip6-localhost\s+ip6-loopback|ff02::1\s+ip6-allnodes|ff02::2\s+ip6-allrouters/ {next} {count++} count==$number" /etc/hosts)
    if [ -z "$entry" ]; then
      echo "Invalid selection. No such entry."
      exit 1
    fi
    read -p "Sub-hostname to append: " subhostname
    if [[ $subhostname =~ ^[a-zA-Z0-9.-]+$ ]]; then
      if ! grep -q "$subhostname" <<<"$entry"; then
        sed -i "s/^$entry\$/$entry $subhostname/" /etc/hosts
        echo "Sub-hostname appended."
      else
        echo "Sub-hostname already exists in entry."
      fi
    else
      echo "Invalid sub-hostname format."
    fi
    ;;
  4) # Remove entry
    echo -e "\nUser-added entries:\n"
    awk "/127\.0\.0\.1\s+localhost|127\.0\.1\.1\s+kali|::1\s+localhost\s+ip6-localhost\s+ip6-loopback|ff02::1\s+ip6-allnodes|ff02::2\s+ip6-allrouters/ {next} {count++; print count, \$0}" /etc/hosts
    read -p "Choose entry by number to remove: " number
    entry=$(awk "/127\.0\.0\.1\s+localhost|127\.0\.1\.1\s+kali|::1\s+localhost\s+ip6-localhost\s+ip6-loopback|ff02::1\s+ip6-allnodes|ff02::2\s+ip6-allrouters/ {next} {count++} count==$number" /etc/hosts)
    if [ -z "$entry" ]; then
      echo "Invalid selection."
    else
      sed -i "/$entry/d" /etc/hosts
      echo "Entry removed."
    fi
    ;;
  5) # Wipe non-localhost entries
    wipe_hosts
    ;;
  *) # Invalid option
    echo "Invalid option. Please try again."
    ;;
esac
